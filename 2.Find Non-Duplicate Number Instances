Given an array of sorted numbers, move all non-duplicate number instances at the beginning of the array in-place.
The relative order of the elements should be kept the same and you should not use any extra space so that the solution has constant space complexity i.e., .

Move all the unique number instances at the beginning of the array and after moving return the length of the subarray that has no duplicate in it.





def remove_duplicates(nums):
    if len(nums) == 0:
        return 0

    # Initialize a pointer to keep track of the last unique element.
    unique_index = 0

    for i in range(1, len(nums)):
        if nums[i] != nums[unique_index]:
            # We found a unique element, so increment the unique_index and swap the elements.
            unique_index += 1
            nums[i], nums[unique_index] = nums[unique_index], nums[i]

    # After the loop, all unique elements are at the beginning, and the rest of the array contains duplicates.
    return unique_index + 1

# Example usage:
arr = [1, 1, 2, 2, 2, 3, 4, 4, 5]
new_length = remove_duplicates(arr)
print("Array after removing duplicates:", arr[:new_length])
print("Length of the subarray with no duplicates:", new_length)

Given an array of unsorted numbers, find all unique triplets in it that add up to zero.

Example 1:

Input: [-3, 0, 1, 2, -1, 1, -2]
Output: [[-3, 1, 2], [-2, 0, 2], [-2, 1, 1], [-1, 0, 1]]
Explanation: There are four unique triplets whose sum is equal to zero. smallest sum.'

def find_unique_triplets(arr):
    arr.sort()  # Sort the input array.

    triplets = []  # To store the unique triplets.

    for i in range(len(arr) - 2):
        if i > 0 and arr[i] == arr[i - 1]:
            # Skip duplicates to avoid duplicate triplets.
            continue

        left, right = i + 1, len(arr) - 1

        while left < right:
            total = arr[i] + arr[left] + arr[right]

            if total == 0:
                triplets.append([arr[i], arr[left], arr[right]])

                # Move the left and right pointers to skip duplicates.
                while left < right and arr[left] == arr[left + 1]:
                    left += 1
                while left < right and arr[right] == arr[right - 1]:
                    right -= 1

                left += 1
                right -= 1
            elif total < 0:
                left += 1
            else:
                right -= 1

    return triplets

# Example usage:
arr = [-1, 0, 1, 2, -1, -4]
result = find_unique_triplets(arr)
print("Unique triplets that sum to zero:", result)

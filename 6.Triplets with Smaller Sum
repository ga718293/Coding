Given an array arr of unsorted numbers and a target sum, count all triplets in it
such that arr[i] + arr[j] + arr[k] < target where i, j, and k are three different indices. 
Write a function to return the count of such triplets.

Example 1:

Input: [-1, 0, 2, 3], target=3 
Output: 2
Explanation: There are two triplets whose sum is less than the target: [-1, 0, 3], [-1, 0, 2]

Example 2:

Input: [-1, 4, 2, 1, 3], target=5 
Output: 4
Explanation: There are four triplets whose sum is less than the target: 
[-1, 1, 4], [-1, 1, 3], [-1, 1, 2], [-1, 2, 3]



def count_triplets_with_smaller_sum(arr, target):
    arr.sort()  # Sort the input array.

    count = 0

    for i in range(len(arr) - 2):
        left = i + 1
        right = len(arr) - 1

        while left < right:
            current_sum = arr[i] + arr[left] + arr[right]

            if current_sum < target:
                # If the current triplet's sum is less than the target, all triplets
                # with the current 'left' and 'right' values will also be less than the target.
                # So, we add 'right - left' to the count and move the 'left' pointer to the right.
                count += right - left
                left += 1
            else:
                # If the current triplet's sum is greater than or equal to the target, we
                # move the 'right' pointer to the left to find smaller triplets.
                right -= 1

    return count

# Example usage:
arr = [-1, 4, 2, 1, 3]
target = 5
result = count_triplets_with_smaller_sum(arr, target)
print("Number of triplets with a sum less than", target, "is", result)
